from __future__ import annotations
import time
import asyncio
import warnings
from binance_trader_class_def import BinanceTrader
import nest_asyncio
with warnings.catch_warnings():
    warnings.simplefilter('ignore', RuntimeWarning)


async def main() -> None:
    trader = BinanceTrader()
    while True:
        start_time = time.time()
        await trader._initialize_trade_engine()
        try:
            while time.time() < start_time+10:
                print('1s')
                time.sleep(1)
                pass

        except KeyboardInterrupt:
            print('Program interrupted.')
            return
        finally:
            await trader.async_client.close_connection()


if __name__ == "__main__":
    nest_asyncio.apply()
    loop = asyncio.get_event_loop()
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print('Keyboard Interrupt')

    finally:
        print('Find all running tasks')
        pending = asyncio.all_tasks(loop=loop)
        for task in pending:
            print(task.get_name())
            task.cancel()
        if loop.is_running():
            print('stop loop')
            loop.stop()
        print('Program stopped - exiting.')
