from __future__ import annotations
import time
import asyncio
import warnings
from BAT_class_def_multilog import BinanceTraderWIP
import copy
import config
import nest_asyncio
with warnings.catch_warnings():
    warnings.simplefilter('ignore', RuntimeWarning)
import traceback


async def main() -> None:
    autotrader = BinanceTraderWIP()
    while True:  # continue running contents as long as no KeyboardInterrupt
        try:
            # start time of loop, so can reconnect before server ~24h timeout
            start_time = time.time()
            # connect to exchange server, setup websockets, trade manager, client
            if not await autotrader.initialize_trade_engine():
                print('Error initializing trade engine')
                break
            # if it has been more than x hours, restart loop to reconnect
            # and avoid server timeout
            while time.time() < start_time+3600*20:
                # print('1')
                await autotrader.kl_socket.run()
                # print('2')
                orders = autotrader.trading_strategy(autotrader.kl_socket.indicators)
                # print('3')

                if orders:
                    # print('4')
                    order_result = {}
                    for trading_pair in orders:
                        # autotrader.balance = autotrader.kl_socket.balance
                        # print('deepcopy orders to order_result')
                        order_result[trading_pair] = copy.deepcopy(orders[trading_pair].order)
                        order_result[trading_pair]['status'] = None
                        # print('7')
                        if orders[trading_pair].order['status'] == 'REISSUE_ST':
                            print('st reissue in main')
                            await autotrader.reissue_stop_trail(autotrader, orders[trading_pair])
                            continue
                        if orders[trading_pair].order['status'] == 'EXPIRED':
                            print(f'order expired for pair {trading_pair}')
                            if await orders[trading_pair].cancel(autotrader) is True:
                                print(f"Order cancelled: {trading_pair} {orders[trading_pair].order['name']}")
                            continue
                        # print('9')
                        if orders[trading_pair].alive():
                            print(f'order alive for pair {trading_pair}')
                            if autotrader.kl_socket.bal_update_flag[trading_pair] is True:
                                autotrader.kl_socket.current_pair_buffer.append(trading_pair)
                                # print('11')
                                print(orders[trading_pair].order)
                                if orders[trading_pair].order.get('order_name') == 'SellHigh':
                                    # print('12')
                                    if autotrader.order_stop_trail[trading_pair].alive():
                                        if await autotrader.order_stop_trail[trading_pair].cancel(autotrader) is False:
                                            print('Error cancelling stop trail')
                                            continue
                                order_result[trading_pair] = await autotrader.place_order(**orders[trading_pair].order)
                                autotrader.kl_socket.bal_update_flag[trading_pair] = False
                            # print('6')
                            if order_result[trading_pair]:
                                # print(order_result[trading_pair])
                                orders[trading_pair].order['status'] = order_result[trading_pair]['status']
                            else:
                                print('Error placing order.')
                    autotrader.log_data(autotrader.kl_socket.indicators, order_result)
        except KeyboardInterrupt:
            # if Ctrl+C or IDE stopped - doesn't seem to trigger if program is interrupted in a sub-task
            print('Program interrupted.')
        except RuntimeError:
            print('Runtime error.')
        except asyncio.CancelledError:  # triggers in linux not windows
            print('Program cancelled.')
        finally:
            print('Closing connection...')
            await autotrader.async_client.close_connection()
            print('Connection closed.')
            traceback.print_exc()
            return


if __name__ == "__main__":
    nest_asyncio.apply()  # allows async functions to run in an IDE IPython console
    loop = asyncio.get_event_loop()  # create main asynchronous loop
    # try:  # TODO: try in windows without try except in this area and if it closes, then delete below
    asyncio.run(main())  # run main()
    '''except KeyboardInterrupt:
        # if program stopped via IDE or Ctrl+C - triggers if program interrupted in sub-task but not if in main loop
        print('Keyboard Interrupt')
    except RuntimeError:
        print('runtime error')
    finally:'''
    # close out pending asynchronous tasks
    print('Find all running tasks')
    pending = asyncio.all_tasks(loop=loop)
    for task in pending:
        print(task.get_name())
        task.cancel()
    # all tasks closed, now stop loop and exit
    if loop.is_running():
        print('stop loop')
        loop.stop()
    print('Program stopped - exiting.')
