from __future__ import annotations
from binance.exceptions import BinanceAPIException
import time
import datetime, requests, asyncio, warnings, config
import numpy as np
import pandas as pd
from talib import abstract
from binance import AsyncClient, BinanceSocketManager
import aiohttp
# import IPython
import copy
with warnings.catch_warnings():
    warnings.simplefilter('ignore', RuntimeWarning)
from unicorn_binance_websocket_api import BinanceWebSocketApiManager
import json

class BinanceTrader:

    def __init__(self, intervs=[]):

        self.exchangeinfo = []
        self.async_client = None
        self.bm = None
        self.trade_manager = None

        self.order_stop_trail = {}
        self.order_sell_high = {}
        self.order_buy = {}

        self.intervals = intervs # config.intervals
        self.data = {}
        self.klines = {}
        self.kline_messages = {}
        self.COMM_RATE = 0.001
        self.buy_price = 0
        self.buy_time = 0
        self.buy_comm = 0
        self.buy_size = 0
        pass

    async def initialize_trade_engine(self) -> bool:
        await self._initialize_exchange_connection()
        if config.reset_orders:
            if await self._close_all_open_orders():
                print('All open orders closed.')

        await self.get_exchange_info()
        await self._prelim_data_spool()

        # initialize websockets for latest klines of each pair, interval
        # self.klines = {trading_pair: {interval: KlineSocketObject}}
        self.klines = {trading_pair:
            {_interval:
                self.bm.kline_socket(
                    symbol=trading_pair,
                    interval=_interval
                )
                for _interval in self.intervals}
            for trading_pair in self.exchangeinfo}

        self.kline_messages = {trading_pair:
                                   {_interval: None
                                    for _interval in self.intervals}
                               for trading_pair in self.exchangeinfo}

        self.trade_manager = self.bm.user_socket()
        print('Sockets initialized.')
        self.balance = {}
        await self._balance_update()
        print(self.balance)
        print('Initialization Complete.')
        return self.data

    async def _initialize_exchange_connection(self) -> None:
        # initialize websocket client to livestream data one ping at a time. preferable to
        # downloading redundant or late data as would happen with manual update periods using regular client
        try:
            self.async_client = await AsyncClient.create(
                api_key=config.API_KEY,
                api_secret=config.API_SECRET,
                testnet=config.use_testnet,
                tld='us'
            )
        except:
            print('Error creating client')
            return
        self.bm = BinanceSocketManager(self.async_client, user_timeout=5)
        if self.async_client and self.bm:
            print('Exchange connection and websocket manager initialized.')
        return

    async def _prelim_data_spool(self) -> bool:
        init_data_raw_intervals = {}
        # download initial data for the longer EMA timeframes, so calculations can start immediately
        # rather than spooling up hundreds of ticks of price data for EMA600, 400 etc
        for trading_pair in self.exchangeinfo:
            for _interval in self.intervals:
                init_data_raw_intervals[_interval] = await self._server_connect_try_except(
                    "self.async_client.get_klines(symbol=trading_pair, " +
                    "interval=_interval, " +
                    "limit=601)",
                    {},
                    {'self': self, 'trading_pair': trading_pair, '_interval': _interval}
                )
                if init_data_raw_intervals[_interval]:
                    # numpy array: [depth, rows, columns]
                    init_data_raw_intervals[_interval] = pd.DataFrame(np.array(init_data_raw_intervals[_interval])[:,0:6],
                                                                      columns=['open_time', 'open', 'high', 'low', 'close', 'volume'],
                                                                      dtype='float64')
                    print('Initial data loaded - {} {}'.format(trading_pair, _interval))
                else:
                    print('Error spooling {} {}'.format(trading_pair, _interval))
                    return False
            # self.data is in form {pair: {interval: pd.DataFrame}}
            self.data[trading_pair] = init_data_raw_intervals
        return

    # update wallet values with latest balances
    async def _balance_update(self) -> bool:
        ''' sets self.balance to dict of form:
            {
                'BNB': 1000.00,
                'XLM': 900000.00,
                }'''
        #get account info for balance checking
        acc_result = await self._server_connect_try_except(
            'self.async_client.get_account(recvWindow=10000)',
            {},
            {'self': self}
        )
        if 'balances' in acc_result:
            wallet_pair_list = [pair for pair in config.balance]  # TODO may be meaninglessly restrictive, why does config need a list of assets?
            for bal in acc_result['balances']:
                if bal['asset'] in wallet_pair_list:
                    self.balance[bal['asset']] = float(bal['free'])
            return True
        else:
            print('No balances in Account!')
            return False

    async def _server_connect_try_except(self, *args):
        try:
            conn_result = await eval(*args)
        except BinanceAPIException as e:
            print(e)
            print('Error querying server - something went wrong.')
            return False
        except requests.exceptions.RequestException as e:
            print(e)
            print('Error - Check connection')
            return False
        except aiohttp.client_exceptions.ClientOSError as e:
            print(e)
            print('Error - connection reset by peer.')
            return False
        except asyncio.CancelledError:
            print('server connect try except cancelled')
            return False
        else:
            return conn_result

    def _order_stream_data_process(self, order_result_raw: dict, datastream: str) -> dict:
        order_result = {}
        if order_result_raw:
            if datastream == 'Type1':
                cumulative_comm = 0.0
                cumulative_price = 0.0
                for x in order_result_raw['fills']:
                    cumulative_comm += float(x['commission'])
                    cumulative_price += float(x['price'])
                i = len(order_result_raw['fills'])
                if i != 0:
                    order_result_raw['price'] = float(cumulative_price) / i

                order_result = copy.deepcopy(order_result_raw)  # {key:value for key, value in order_result_raw}
                order_result['quantity'] = float(order_result.pop('executedQty'))
                order_result['time'] = float(order_result.pop('transactTime'))
                order_result['price'] = float(order_result.pop('price'))
                order_result['commission'] = cumulative_comm
                if order_result['side'] == 'BUY' and order_result['status'] == 'FILLED':
                    self.buy_comm = cumulative_comm

            elif datastream == 'Type2':
                order_result = {
                    'symbol': order_result_raw['s'],
                    'side': order_result_raw['S'],
                    'type': order_result_raw['o'],
                    'timeInForce': order_result_raw['f'],
                    'quantity': float(order_result_raw['z']),
                    'price': float(order_result_raw['p']),
                    'orderId': order_result_raw['i'],
                    'time': float(order_result_raw['E']),
                    'status': order_result_raw['X'],
                    'commission': float(order_result_raw['n'])
                }
        else:
            order_result = order_result_raw
        return order_result

    async def _close_all_open_orders(self) -> bool:
        open_orders = await self._server_connect_try_except("self.async_client.get_open_orders()")
        if open_orders:
            for order in open_orders:
                cancel_status = await self._server_connect_try_except(
                    "self.async_client.cancel_order(" +
                    "symbol=order['symbol'], " +
                    "orderId=order['orderId'])",
                    {},
                    {'order': order, 'self': self})
                if cancel_status:
                    # await self.async_client.cancel_order(symbol=order['symbol'], orderId=order['orderId'])
                    print(f"Order closed: Symbol: {order['symbol']} OrderId: {order['orderId']}")
            return True
        else:
            return False

    def log_data(self, indicators: dict, order_result: dict) -> bool:
        for trading_pair in self.exchangeinfo:
            if not indicators.get(trading_pair):
                break
            for interval in self.intervals:
                if not indicators[trading_pair].get(interval):
                    break
                dt = datetime.datetime.fromtimestamp(indicators[trading_pair][interval][1]['time']/1000)
                # if an order is currently active, log relevant info to console
                # otherwise log indicators
                if order_result[trading_pair].order['status']:
                    #prevent div by zero error on initial iteration - gain % will be wrong but wgaf
                    if self.buy_price == 0.0 or self.buy_size == 0.0:
                        self.buy_size = 1.0
                        self.buy_price = 1.0
                    output = (
                            f"OrderID: {order_result[trading_pair].order['orderId']:3d} " +
                            f"Type: {order_result[trading_pair].order['symbol']:<2} " +
                            f"{order_result[trading_pair].order['type']:<2} " +
                            f"{order_result[trading_pair].order['name']:<2} ".ljust(5) +
                            "Status: " +
                            f"{order_result[trading_pair].order['status']:1} ".ljust(17) +
                            "Size: ".ljust(6) +
                            f"{order_result[trading_pair].order['quantity']:6.2f} ".rjust(8) +
                            f"Price: {order_result[trading_pair].order['price']:6.4f} " +
                            f"Cost: {order_result[trading_pair].order['quantity']*order_result[trading_pair].order['price']:6.2f} " +
                            f"Comm: {order_result[trading_pair].order['commission']:4.2f} "
                    )

                    if order_result[trading_pair].order['status'] == "FILLED":
                        if order_result[trading_pair].order['side'] == 'SELL':
                            profit = (order_result[trading_pair].order['price']-self.buy_price)*order_result[trading_pair].order['quantity']
                            loss = order_result[trading_pair].order['commission'] + self.buy_comm
                            initial_buy_cost = self.buy_size*self.buy_price
                            output += (
                                    f"gain: {(profit - loss):4.2f} " +
                                    f"gain%: {100*(profit - loss)/initial_buy_cost:3.2f}% "
                            )
                        else:
                            print("\a")
                        f = open("tradelog.txt", "a")
                        f.write('%s, %.8s, %s \n' % (dt.date().isoformat(), dt.time(), output))
                        f.close()

                else:
                    output = (
                            f"{trading_pair}: {interval} " +
                            f"RSI6: {indicators[trading_pair][interval][1]['RSI6']:7.4f} " +
                            f"RSI50: {indicators[trading_pair][interval][1]['RSI50']:7.4f} " +
                            f"BB-Upper: {indicators[trading_pair][interval][1]['bband_upper']:6.4f} " +
                            f"BB-Middle: {indicators[trading_pair][interval][1]['bband_middle']:6.4f} " +
                            f"BB-Lower: {indicators[trading_pair][interval][1]['bband_lower']:6.4f} " +
                            f"Close Price: {indicators[trading_pair][interval][1]['close_price']:6.4f} "
                    )
                print('%s, %.8s, %s' % (dt.date().isoformat(), dt.time(), output))

        return

    '''
    async def check_order_status(self, *args: config.Order) -> bool:
        orders = (item for item in args if item.order['symbol'] is not None)
        for order in orders:
            if not order.alive():
                return False
            order_details = await self._server_connect_try_except(
                "self.async_client.get_order(" +
                "symbol=order.order['symbol']," +
                "orderId=order.order['orderId'])",
                {},
                {'order': order, 'self': self}
                )
            if order_details:
                order.set(**order_details)
            else:
                print(f"Error querying order: {order.order['orderId']}")
                return False
        return True
    '''

    async def get_exchange_info(self):
        exchange_info_raw = await self._server_connect_try_except(
            "self.async_client.get_exchange_info()",
            {},
            {'self': self}
        )
        if exchange_info_raw:
            # self.exchangeinfo is dict of dicts, each containing exchange information about a trading pair listed in config
            assets = [t_p for t_p in config.trading_pairs]
            asset_details = [p for p in exchange_info_raw['symbols']
                             if p['symbol'] in assets]
            self.exchangeinfo = {pair:symbol for pair, symbol in
                                 zip(
                                     [s['symbol'] for s in asset_details],
                                     [p for p in exchange_info_raw['symbols']
                                      if p['symbol'] in assets
                                      ]
                                 )}
            # print(self.exchangeinfo)
            self._set_max_min_trade_qty()
        return

    def _set_max_min_trade_qty(self) -> None:
        self.trade_qty_limits = {}
        # creates dict with the buy/sell limits for each trading pair and order type
        # filters out trading pairs not listed in config.py
        '''i.e.:
            {'LTCBUSD': {
                'BUY': {
                    'MARKET': {
                        'MAX': 1000.0, 'MIN': 0.0},
                   'LIMIT': {
                       'MAX': 1000.0, 'MIN': 0.0}},
                'SELL': {
                    'MARKET': {
                        'MAX': 1000.0, 'MIN': 0.0},
                    'LIMIT': {
                        'MAX': 1000.0, 'MIN': 0.0}}},
             'BNBUSDT': {
                 'BUY': {
                     'MARKET': {
                         'MAX': 1000.0, 'MIN': 0.0},
                     'LIMIT': {
                         'MAX': 1000.0, 'MIN': 0.0}},
                 'SELL': {
                     'MARKET': {
                         'MAX': 1000.0, 'MIN': 0.0},
                     'LIMIT': {
                         'MAX': 1000.0, 'MIN': 0.0}}}}
        '''
        transact_types = ['BUY', 'SELL']
        order_types = ['MARKET', 'LIMIT']
        filter_types = ['MARKET_LOT_SIZE', 'LOT_SIZE']
        self.trade_qty_limits = {trading_pair: {
            transact_type: {
                order_type: {
                    'MAX': float(filters['maxQty']),
                    'MIN': float(filters['minQty'])
                }
                for order_type in order_types
            }
            for transact_type in transact_types
        }
            for trading_pair in self.exchangeinfo
            for filters in self.exchangeinfo[trading_pair]['filters']
            if filters['filterType'] in filter_types
        }
        # IPython.display.display(self.trade_qty_limits)
        pass

    def setup_order_options(self, pair: str, base_asset_bal: float, quote_asset_bal: float, order_price: float, order_side: str = 'SELL', order_type: str = 'LIMIT', order_name: str = '', order_status: str = 'NEW', interval: str = '5m') -> dict:
        order_options = copy.deepcopy(config.order_opts)
        order_options['symbol'] = pair
        order_options['price'] = order_price
        order_options['type'] = order_type
        order_options['name'] = order_name
        order_options['side'] = order_side
        order_options['status'] = order_status
        if order_side == 'BUY':
            self.buy_price = order_options['price']
            self.buy_size = 1  # TODO reset when not in testnet # float("{:.0f}".format(0.98*quote_asset_bal/self.data['close'].values[-1]))
            if self.buy_size > self.trade_qty_limits[pair][order_side][order_type]['MAX']:
                self.buy_size = self.trade_qty_limits[pair][order_side][order_type]['MAX']
            order_options['quantity'] = self.buy_size
            self.buy_time = time.time()

        elif order_side == 'SELL':
            if base_asset_bal > self.trade_qty_limits[pair][order_side][order_type]['MAX']:
                base_asset_bal = self.trade_qty_limits[pair][order_side][order_type]['MAX']
            # reset bal when test to self.buy_size
            order_options['quantity'] = float("{0:.{1}f}".format(base_asset_bal, self.exchangeinfo[pair]['baseAssetPrecision']))
        return order_options

    ##################################################################
    # BUY LOGIC
    # Takes indicators and returns True/False if conditions are met or not
    ##################################################################
    def buy_logic(self, indicators: dict) -> bool:
        ######### TODO: INSERT BUY CONDITIONS HERE ##########
        return True

    ##################################################################
    # SELL LOGIC
    # Takes indicators and returns True/False if conditions are met or not
    ##################################################################
    def sell_logic(self, indicators: dict) -> bool:
        ############# TODO: INSERT CONDITIONS HERE ##############
        return True


class BinanceTraderWIP(BinanceTrader):

    def __init__(self, intervs=[]):
        BinanceTrader.__init__(self, intervs)
        pass

    ##################################################################
    # TRADING STRATEGY (archaic name, change to something more relevant)
    # Determines if it's the right time, then sets up orders with
    # appropriate parameters.
    ##################################################################
    def trading_strategy(self, indicators: dict, current_data: dict) -> dict(Order):
        order_type_buy = 'MARKET'
        order_type_sell = 'LIMIT'
        order = {}
        for trading_pair in self.exchangeinfo:
            print(f'order conditions check for: {trading_pair}')
            shared_order_vars = {
                'pair': trading_pair,
                'base_asset_bal': self.balance[config.trading_pairs[trading_pair]['baseAsset']],
                'quote_asset_bal': self.balance[config.trading_pairs[trading_pair]['quoteAsset']],
                'order_price': float("{:.4f}".format(current_data[trading_pair][self.intervals[0]]['close'].values[-1])),
            }
            order[trading_pair] = Order()
            if not self.order_stop_trail.get(trading_pair):
                self.order_stop_trail[trading_pair] = StopTrailOrder(trail_percent=0.02)
            if not self.order_sell_high.get(trading_pair):
                self.order_sell_high[trading_pair] = Order()
            if not self.order_buy.get(trading_pair):
                self.order_buy[trading_pair] = Order()
            #####################
            # BUYING CONDITIONS #
            #####################
            if shared_order_vars['base_asset_bal'] <= self.trade_qty_limits[trading_pair]['BUY'][order_type_buy]['MIN']:  # TODO reset when live to bal<minpos
                # print('Buy cond 1: T')
                # print(self.order_buy.order)
                if not self.order_buy[trading_pair].alive():
                    # print('buy cond 2: T')
                    if self.buy_logic(indicators):
                        # print('3')
                        order_opts = self.setup_order_options(
                            order_side='BUY',
                            order_type=order_type_buy,  # TODO del when not in testnet
                            order_name='Buy',
                            **shared_order_vars
                        )
                        # print('4')
                        self.order_buy[trading_pair].set(**order_opts)
                        # print('buy order set')
                        # print(self.order_buy.order)
                # if we are in buying mode, set return order to order_buy
                # sets to either the existing order or to the newly set options
                order[trading_pair] = self.order_buy[trading_pair]

            ######################
            # SELLING CONDITIONS #
            ######################
            # if we have above the min balance for selling
            elif shared_order_vars['base_asset_bal'] >= self.trade_qty_limits[trading_pair]['SELL'][order_type_sell]['MIN']:  # comment out bal >= minpossell when test
                print('sell mode')
                if not self.order_sell_high[trading_pair].alive():
                    print('sell high dead')
                    if self.order_stop_trail[trading_pair].alive():
                        # only stoptrail is open
                        print('stop trail alive')
                        if self.order_stop_trail[trading_pair].check(shared_order_vars['order_price']):
                            # if stop trail hit the stop price
                            # sell - just pass order to return
                            order[trading_pair] = self.order_stop_trail[trading_pair]
                        # if sell conditions are good, sell for profit
                        elif self.sell_logic(indicators):
                            print('sell high')
                            order_opts = self.setup_order_options(
                                order_name='SellHigh',
                                **shared_order_vars)
                            if self.order_stop_trail[trading_pair].cancel(self.async_client):
                                self.order_sell_high[trading_pair].set(**order_opts)
                                order[trading_pair] = self.order_sell_high[trading_pair]
                            else:
                                print('Error cancelling StopTrailOrder')
                                # set status or other flag to tell main() 
                                # that it wasnt successful and to not pass order to next function
                                self.order_stop_trail[trading_pair].order['side'] = None
                                order[trading_pair] = self.order_stop_trail[trading_pair]
                                
                        else:
                            # if it didnt hit the stop price and sell_logic() is not indicating a profit sell
                            # cancel old order
                            if self.order_stop_trail[trading_pair].cancel(self.async_client):
                                # set new order with same details as previous order
                                # (order_price already updated with .check() above)
                                self.order_stop_trail[trading_pair].order['status'] = 'NEW'
                                order[trading_pair] = self.order_stop_trail[trading_pair]
                            else:
                                print('Error cancelling StopTrailOrder')
                                # set status or other flag to tell main() 
                                # that it wasnt successful and to not pass order to next function
                                self.order_stop_trail[trading_pair].order['side'] = None
                                order[trading_pair] = self.order_stop_trail[trading_pair]
                    else:
                        print('stop trail dead')
                        # if both sell orders are closed, set trailstop
                        order_opts = self.setup_order_options(
                            order_type=order_type_sell,
                            order_name='StopTrail',
                            **shared_order_vars
                        )
                        self.order_stop_trail[trading_pair].set(**order_opts)
                        order[trading_pair] = self.order_stop_trail[trading_pair]
                        print('stoptrail set')
                        print(self.order_stop_trail[trading_pair].order)
                    print(f"stoptrail sell, status: {self.order_stop_trail[trading_pair].order['status']}")
                else:
                    # if in sell mode and order_sell_high is open,
                    # TODO check if time limit reached - implement duration check into Order class
                    # if so, cancel sell high
                    # else return existing order_sell_high order
                    order[trading_pair] = self.order_sell_high[trading_pair]
                    pass
        print('done trading strategy')
        return order

    ##################################################################
    # PLACE ORDER
    # Formats order params for api, then calls api create_order() method.
    # Returns server response as order_result.
    ##################################################################
    async def place_order(self, **order_params: dict) -> dict:
        # remove excess order params that will cause error if used with MARKET order
        # comment if statement when testing
        if order_params['type']=='MARKET':
            del order_params['timeInForce']
            del order_params['price']

        # remove extra order params that are useful as part of Order object
        # but are not proper arguments to pass to the api
        order_parameters = {key:value for key, value in order_params.items() if key in config.API_ORDER_PARAMS}

        #for testing only (ie no order actually placed so fake order response):
        """
        order_result_raw = {
                            'symbol': order_parameters['symbol'],
                            'side': order_parameters['side'],
                            'type': order_parameters['type'],
                            'timeInForce': order_parameters['timeInForce'],
                            'executedQty': order_parameters['quantity'],
                            'price': order_parameters['price'],
                            'newClientOrderId': 000000,
                            'transactTime': time.time()*1000,
                            'status': 'FILLED',
                            'fills': [{'price': order_parameters['price'], 'qty': order_parameters['quantity'], 'commission': '0.00000000', 'commissionAsset': 'USDT', 'tradeId': 00000}]
                            }
        """
        #comment order_result_raw line below when testing
        order_result_raw = await self._server_connect_try_except(
            'self.async_client.create_order(**order_p)',
            {},
            {'order_p': order_parameters, 'self': self}
        )
        if order_result_raw:
            order_result = self._order_stream_data_process(order_result_raw, datastream='Type1')
        else:
            order_result = {}
        return order_result


class BinanceWs:

    def __init__(self, channels, markets, spool):
        self.binance_websocket_api_manager = BinanceWebSocketApiManager(exchange="binance.com-testnet")
        self.stream = self.binance_websocket_api_manager.create_stream(channels, markets)
        self.data = spool 
        self.indicators = {trading_pair:
                                   {_interval[6:]: None
                                    for _interval in channels}
                               for trading_pair in markets}
        
        self.channel_dir = {channel: channel[6:] for channel in channels}
        
    async def run(self):
        received_stream_data_json = self.binance_websocket_api_manager.pop_stream_data_from_stream_buffer()
        if received_stream_data_json:
            json_data = json.loads(received_stream_data_json)
            candle_data = json_data.get('data', {})
            if candle_data:
                candle = candle_data.get('k', {})
                symbol = candle.get('s', {})
                timeframe = candle.get('i', {})
                self._process_raw_klines(candle_data, symbol, timeframe)
                self.indicators[symbol][timeframe] = self._indicator_data(symbol, timeframe)

    ##################################################################
    # PROCESS RAW KLINES
    # Appends relevant information to self.data and removes first entry
    # to avoid overloading memory (only take what we need from past data)
    ##################################################################
    def _process_raw_klines(self, new_data_raw: dict, trading_pair: str, interval: str) -> None:

        # take only relevant data (OHLC, volume)
        # convert to float64 so talib doesn't bitch
        new_data = pd.DataFrame([{
            'open_time': new_data_raw['k']['t'],
            'open': new_data_raw['k']['o'],
            'high': new_data_raw['k']['h'],
            'low': new_data_raw['k']['l'],
            'close': new_data_raw['k']['c'],
            'volume': new_data_raw['k']['v'],
        }]).astype('float64')

        #add new data tick onto existing data set and remove the 0th line
        # to avoid dataset getting huge and overwhelming memory. keep only
        # what is needed for biggest indicator. i.e. 600 lines for EMA600
        self.data[trading_pair][interval] = pd.concat([self.data[trading_pair][interval], new_data], ignore_index=True)
        self.data[trading_pair][interval].drop([0], inplace=True)
        return
    
    ###################################################################
    # INDICATOR DATA
    # Calculates indicators from the latest self.data and returns the
    # nth and (n-1)th indicators
    ##################################################################
    def _indicator_data(self, trading_pair: str, interval: str) -> list(dict):
        indicators_per_pair_and_interval = [0 for _ in range(2)]
        CLOSE_PRICE = self.data[trading_pair][interval]['close']
        _TIME = self.data[trading_pair][interval]['open_time']
        RSI6 = abstract.RSI(self.data[trading_pair][interval]['close'].values, timeperiod=6)
        RSI50 = abstract.RSI(self.data[trading_pair][interval]['close'].values, timeperiod=50)
        bband_upper, bband_middle, bband_lower = abstract.BBANDS(self.data[trading_pair][interval]['close'], timeperiod=20, nbdevup=2.0, nbdevdn=2.0, matype=5)

        # Index note: indicators_per_pair_and_interval[1] == RSIXX[-1] and indicators[0] == RSIXX[-2]
        # range(2) because we want both the ultimate and penultimate values
        for i in range(2):
            indicators_per_pair_and_interval[i] = {
                
                'close_price': CLOSE_PRICE.values[i-2],
                'time': _TIME.values[i-2],
                'RSI6': RSI6[i-2],
                'RSI50': RSI50[i-2],
                'bband_upper': bband_upper[i-2],
                'bband_middle': bband_middle[i-2],
                'bband_lower': bband_lower[i-2],
                

            }
        return indicators_per_pair_and_interval
    
class Order():
    def __init__(self):
        self.order = {}
        self.reset()

    def set(self, **kwargs):
        for kw in kwargs:
            self.order[kw] = kwargs[kw]

    def reset(self):
        self.order.clear()
        self.set(
            **{
                'symbol': None,
                'side': None, #buy/sell
                'type': None, #limit, market, etc
                'timeInForce': None,
                'quantity': 0.0,
                'price': 0.0,
                'orderId': 0,
                'time': 0,
                'status': None,
                'commission': 0.0
            }
        )

    def alive(self):
        if self.order['status'] in config.ALIVE_ORDER_STATUS:
            return True
        else:
            return False
        pass

    async def cancel(self, trader):
        if (await trader._server_connect_try_except(
            "trader.cancel_order(" +
            "symbol=self.order['symbol']," +
            "order_Id=self.order['orderId'])",
            {},
            {'trader': trader, 'self': self}
            )):
            return True
        else:
            return False


class StopTrailOrder(Order):
    def __init__(self, trail_percent):
        self.trail_percent = float(trail_percent)
        Order.__init__(self)
    
    def set(self, **kwargs):
        for kw in kwargs:
            self.order[kw] = kwargs[kw]
            if kw == 'price':
                self.order[kw] -= float(kwargs[kw])*self.trail_percent
    
    def check(self, price: float) -> bool:
        if price <= self.order['price']:
            return True
        else:
            self.order['price'] = price*(1-self.trail_percent)
            return False
